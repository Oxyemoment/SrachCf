# –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
required_modules = [
    "telegram",
    "pytz"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª–µ–π
def install_module(module_name):
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
        importlib.import_module(module_name)
        print(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥—É–ª—å {module_name}...")
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ pip
            subprocess.check_call([sys.executable, "-m", "pip", "install", module_name])
            print(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è {module_name}")
            sys.exit(1)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
print("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏...")
for module in required_modules:
    if module == "telegram":
        install_module("python-telegram-bot")
    else:
        install_module(module)

print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import pytz
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = "8377590354:AAFMIlw5gB6qNgJVNQ7j6gjD_LW5BUS5F3Y"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
user_join_times = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /ship
ship_cooldowns = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
user_reminders = {}

# –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /kirbizzlery –≤ —á–∞—Ç–µ
kirbizzlery_cooldown = {}

# –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —à–∏–ø–ø–∏–Ω–≥–∞
SHIP_CHARACTERS = [
    "–ö–∏—Ä–±–∏–Ω", "–æ–ª—è–∑–µ—Ä–∏–∑–∑–ª–µ—Ä", "–æ—Å–∞", "—ç–º–∏–ª–∏—è", "—è–æ", "—Å–≤–∞—Å—Ç", 
    "–Ω–µ–∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω–∞—è", "–∏–ª—é—à–∞", "—Å–∏—Å—è—Ä—É–±–∫–∞", "–Ω–µ–∫—Å–∞—Ä–æ—Å", "–≤—Å—á–∞—Ç–∏–∑", 
    "–±–∞—Ö–ª–∏–∫", "–∏–Ω—å", "–Ω—É—Ä–æ—Ñ–µ–Ω", "—Ç—Ä–∞–º–±–æ–Ω", "–±—ç–∑–∏–ª", "–º–æ–ª—å", 
    "–ø—Ä–æ—Ä–æ–∫", "—Å–∫–∏—Ç—Ç–ª", "–ª–∏–ª–∏—Ç"
]

async def kirbizzlery_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /kirbizzlery - –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        chat_id = update.effective_chat.id
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –≤—Å–µ–≥–æ —á–∞—Ç–∞
        if chat_id in kirbizzlery_cooldown:
            time_passed = current_time - kirbizzlery_cooldown[chat_id]
            if time_passed < 300:  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
                remaining_time = 300 - int(time_passed)
                minutes = remaining_time // 60
                seconds = remaining_time % 60
                await update.message.reply_text(
                    f"‚è≥ –ö–æ–º–∞–Ω–¥–∞ /kirbizzlery –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {minutes}–º {seconds}—Å!"
                )
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
        kirbizzlery_cooldown[chat_id] = current_time
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await update.message.reply_text("–Ω–∞—á–∏–Ω–∞—é —Å–Ω–æ—Å —á–∞—Ç–∞ —á–µ—Ä–µ–∑..")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        asyncio.create_task(countdown_timer(context.bot, chat_id, message.message_id))
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /kirbizzlery: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞")

async def countdown_timer(bot, chat_id, message_id):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –æ—Ç 10 –¥–æ 1
        for i in range(10, 0, -1):
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —á–∏—Å–ª–æ–º
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"–Ω–∞—á–∏–Ω–∞—é —Å–Ω–æ—Å —á–∞—Ç–∞ —á–µ—Ä–µ–∑.. {i}"
            )
            # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
            await asyncio.sleep(1)
        
        # –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –º–µ–Ω—è–µ–º –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="–ø—Ä–æ—Å—Ç–∏ –Ω–æ –Ω–µ—Ç"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")

async def reminder_create_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å - —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) < 4:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å <—á–∞—Å—ã> <–º–∏–Ω—É—Ç—ã> <—Å–µ–∫—É–Ω–¥—ã> <—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å 1 30 0 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        try:
            hours = int(context.args[0])
            minutes = int(context.args[1])
            seconds = int(context.args[2])
        except ValueError:
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        if hours < 0 or minutes < 0 or seconds < 0:
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!")
            return
        
        if minutes >= 60 or seconds >= 60:
            await update.message.reply_text("‚ùå –ú–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–Ω—å—à–µ 60!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_text = ' '.join(context.args[3:])
        if not reminder_text:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        total_seconds = hours * 3600 + minutes * 60 + seconds
        
        if total_seconds == 0:
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º!")
            return
        
        # –°–æ–∑–¥–∞–µ–º ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_id = str(int(time.time()))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if user_id not in user_reminders:
            user_reminders[user_id] = {}
        
        user_reminders[user_id][reminder_id] = {
            'text': reminder_text,
            'create_time': time.time(),
            'trigger_time': time.time() + total_seconds,
            'time_string': f"{hours}—á {minutes}–º {seconds}—Å"
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        asyncio.create_task(
            send_reminder(
                context.bot,
                user_id,
                reminder_id,
                total_seconds
            )
        )
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"‚è∞ –ß–µ—Ä–µ–∑: {hours}—á {minutes}–º {seconds}—Å\n"
            f"üìù –¢–µ–∫—Å—Ç: {reminder_text}\n"
            f"üÜî ID: {reminder_id}"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

async def send_reminder(bot, user_id, reminder_id, delay):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(delay)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if (user_id in user_reminders and 
            reminder_id in user_reminders[user_id]):
            
            reminder = user_reminders[user_id][reminder_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n{reminder['text']}"
            )
            
            # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            del user_reminders[user_id][reminder_id]
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∑–∞–ø–∏—Å—å
            if not user_reminders[user_id]:
                del user_reminders[user_id]
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def reminders_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_reminders or not user_reminders[user_id]:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminders_list = []
        current_time = time.time()
        
        for reminder_id, reminder in user_reminders[user_id].items():
            time_left = int(reminder['trigger_time'] - current_time)
            
            if time_left > 0:
                hours_left = time_left // 3600
                minutes_left = (time_left % 3600) // 60
                seconds_left = time_left % 60
                
                time_left_str = f"{hours_left}—á {minutes_left}–º {seconds_left}—Å"
                
                reminders_list.append(
                    f"üÜî {reminder_id}\n"
                    f"‚è∞ –ß–µ—Ä–µ–∑: {time_left_str}\n"
                    f"üìù {reminder['text']}\n"
                )
        
        if not reminders_list:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!")
            return
        
        reminders_text = "\n".join(reminders_list)
        await update.message.reply_text(
            f"üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(reminders_list)}):\n\n{reminders_text}"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

async def reminder_delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        user_id = update.effective_user.id
        
        if len(context.args) < 1:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å <ID>\n"
                "ID –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
            )
            return
        
        reminder_id = context.args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if (user_id not in user_reminders or 
            reminder_id not in user_reminders[user_id]):
            await update.message.reply_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder_text = user_reminders[user_id][reminder_id]['text']
        del user_reminders[user_id][reminder_id]
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∑–∞–ø–∏—Å—å
        if not user_reminders[user_id]:
            del user_reminders[user_id]
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n\n"
            f"üìù –¢–µ–∫—Å—Ç: {reminder_text}\n"
            f"üÜî ID: {reminder_id}"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

async def reminder_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º"""
    help_text = (
        "üîî –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å <—á> <–º> <—Å> <—Ç–µ–∫—Å—Ç> - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å <ID> - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å 1 0 0 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å 0 30 0 –ü—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å 0 0 10 –°–∫–æ—Ä–æ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∏–º–∞"
    )
    await update.message.reply_text(help_text)

async def ship_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /ship - —Å–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —à–∏–ø–ø —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 25 —Å–µ–∫—É–Ω–¥"""
    try:
        user_id = update.effective_user.id
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if user_id in ship_cooldowns:
            time_passed = current_time - ship_cooldowns[user_id]
            if time_passed < 25:
                remaining_time = 25 - int(time_passed)
                await update.message.reply_text(
                    f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∏–ø–ø–æ–º!"
                )
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        ship_cooldowns[user_id] = current_time
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        char1, char2 = random.sample(SHIP_CHARACTERS, 2)
        
        # –°–æ–∑–¥–∞–µ–º —à–∏–ø–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ "*** —Ö ***"
        ship_text = f"*** {char1} √ó {char2} ***"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≤–µ—Å–µ–ª—å—è
        comments = [
            "‚ú® –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞!",
            "üíï –í–ª—é–±–ª–µ–Ω—ã –ø–æ —É—à–∏!",
            "üî• –ò—Å–∫—Ä—ã –ª–µ—Ç—è—Ç!",
            "üíò –°—É–¥—å–±–∞ —Å–≤–µ–ª–∞!",
            "üåü –ó–≤–µ–∑–¥—ã —Å–æ—à–ª–∏—Å—å!",
            "üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å 100%!",
            "üíí –°–∫–æ—Ä–æ —Å–≤–∞–¥—å–±–∞?",
            "üíã –†–æ–º–∞–Ω—Ç–∏–∫–∞!",
            "üíñ –ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –º–∞—Ç—á!",
            "üíì –õ—é–±–æ–≤—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞!"
        ]
        
        comment = random.choice(comments)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{ship_text}\n{comment}"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /ship: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∏–ø–ø–∞")

async def ss_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /ss - –¥–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∏ –Ω–∞ @SrachC0NF"""
    try:
        chat = update.effective_chat
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        if chat.username:
            chat_link = f"https://t.me/{chat.username}"
        else:
            # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É
            try:
                invite_link = await chat.export_invite_link()
                chat_link = invite_link
            except:
                chat_link = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        message_text = (
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ—Ç —á–∞—Ç: {chat_link}\n"
            f"üë§ –°—Å—ã–ª–∫–∞ –Ω–∞ @SrachC0NF: https://t.me/SrachC0NF"
        )
        
        await update.message.reply_text(message_text)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /ss: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫")

async def track_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
    if update.message and update.message.new_chat_members:
        for new_member in update.message.new_chat_members:
            if not new_member.is_bot:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
                user_join_times[new_member.id] = {
                    'user': new_member,
                    'join_time': update.message.date,
                    'message_id': update.message.message_id
                }
                username = new_member.username or f"User_{new_member.id}"
                logging.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {username} –≤ {update.message.date}")

async def delh_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delh –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    if update.effective_chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await update.effective_chat.get_member(update.effective_user.id)
    if user.status not in ["administrator", "creator"]:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return
    
    try:
        await update.message.reply_text("üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")
        
        deleted_count = 0
        one_hour_ago = datetime.now(pytz.utc) - timedelta(hours=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        admins = await update.effective_chat.get_administrators()
        admin_ids = [admin.user.id for admin in admins]
        
        # –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        recent_members = []
        for user_id, user_data in user_join_times.items():
            if user_data['join_time'] > one_hour_ago:
                recent_members.append(user_data)
        
        # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        if not recent_members:
            try:
                await update.message.reply_text("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞...")
                message_count = 0
                async for message in context.bot.get_chat_history(update.effective_chat.id, limit=50):
                    message_count += 1
                    if message.new_chat_members and message.date > one_hour_ago:
                        for new_member in message.new_chat_members:
                            if not new_member.is_bot and new_member.id not in admin_ids:
                                recent_members.append({
                                    'user': new_member,
                                    'join_time': message.date,
                                    'message_id': message.message_id
                                })
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                                user_join_times[new_member.id] = {
                                    'user': new_member,
                                    'join_time': message.date,
                                    'message_id': message.message_id
                                }
                logging.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}, –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(recent_members)}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞: {e}")
        
        if not recent_members:
            await update.message.reply_text("‚úÖ –ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for member_data in recent_members:
            try:
                user = member_data['user']
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –±–æ—Ç–æ–≤
                if user.id in admin_ids or user.is_bot:
                    continue
                
                # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await update.effective_chat.ban_member(
                    user.id,
                    until_date=int((datetime.now() + timedelta(minutes=1)).timestamp())
                )
                deleted_count += 1
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                try:
                    if 'message_id' in member_data:
                        await context.bot.delete_message(
                            chat_id=update.effective_chat.id,
                            message_id=member_data['message_id']
                        )
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                username = user.username or f"User_{user.id}"
                join_time = member_data['join_time'].strftime("%H:%M:%S")
                logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({user.id}) - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {join_time}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                if user.id in user_join_times:
                    del user_join_times[user.id]
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API
                await asyncio.sleep(0.3)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                continue
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤)
        current_time = datetime.now(pytz.utc)
        for user_id in list(user_join_times.keys()):
            if user_join_times[user_id]['join_time'] < current_time - timedelta(hours=2):
                del user_join_times[user_id]
        
        await update.message.reply_text(
            f"‚úÖ –ê–Ω—Ç–∏—Ä–µ–π–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(recent_members)}\n"
            f"–£–¥–∞–ª–µ–Ω–æ: {deleted_count}\n"
            f"–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /delh: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç"""
    await update.message.reply_text(
        "üõ°Ô∏è –ê–Ω—Ç–∏—Ä–µ–π–¥ –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/delh - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Ö—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å\n"
        "/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞\n"
        "/debug - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/clean - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/ss - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç –∏ @SrachC0NF\n"
        "/ship - —Å–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —à–∏–ø–ø (—Ä–∞–∑ –≤ 25 —Å–µ–∫)\n"
        "/kirbizzlery - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç (—Ä–∞–∑ –≤ 5 –º–∏–Ω –¥–ª—è —á–∞—Ç–∞)\n\n"
        "üîî –ö–æ–º–∞–Ω–¥—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å <—á> <–º> <—Å> <—Ç–µ–∫—Å—Ç>\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å <ID>\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–º–æ—â—å\n\n"
        "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏:\n"
        "‚Ä¢ Ban users\n"
        "‚Ä¢ Delete messages\n"
        "‚Ä¢ Read message history"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â—å"""
    await update.message.reply_text(
        "üõ°Ô∏è –ê–Ω—Ç–∏—Ä–µ–π–¥ –±–æ—Ç\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/delh - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Ö—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å\n"
        "/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞\n"
        "/debug - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/clean - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/ss - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç –∏ @SrachC0NF\n"
        "/ship - —Å–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —à–∏–ø–ø (—Ä–∞–∑ –≤ 25 —Å–µ–∫)\n"
        "/kirbizzlery - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç (—Ä–∞–∑ –≤ 5 –º–∏–Ω –¥–ª—è —á–∞—Ç–∞)\n\n"
        "üîî –ö–æ–º–∞–Ω–¥—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å <—á> <–º> <—Å> <—Ç–µ–∫—Å—Ç>\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å <ID>\n"
        "/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–º–æ—â—å\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞."
    )

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞"""
    if update.effective_chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        bot_member = await update.effective_chat.get_member(context.bot.id)
        
        if bot_member.status not in ["administrator", "creator"]:
            await update.message.reply_text("‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞
        can_ban = bot_member.can_restrict_members if hasattr(bot_member, 'can_restrict_members') else False
        can_delete = bot_member.can_delete_messages if hasattr(bot_member, 'can_delete_messages') else False
        
        await update.message.reply_text(
            f"‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
            f"üõ°Ô∏è –ü—Ä–∞–≤–∞ –Ω–∞ –±–∞–Ω: {'‚úÖ –ï—Å—Ç—å' if can_ban else '‚ùå –ù–µ—Ç'}\n"
            f"üóëÔ∏è –ü—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ –ï—Å—Ç—å' if can_delete else '‚ùå –ù–µ—Ç'}\n\n"
            f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(user_join_times)}"
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö"""
    if update.effective_chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await update.effective_chat.get_member(update.effective_user.id)
    if user.status not in ["administrator", "creator"]:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return
    
    try:
        one_hour_ago = datetime.now(pytz.utc) - timedelta(hours=1)
        recent_members = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for user_id, user_data in user_join_times.items():
            if user_data['join_time'] > one_hour_ago:
                recent_members.append(user_data)
        
        if recent_members:
            users_info = []
            for member_data in recent_members[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 20
                user = member_data['user']
                username = user.username or f"User_{user.id}"
                join_time = member_data['join_time']
                time_diff = datetime.now(pytz.utc) - join_time
                minutes_ago = int(time_diff.total_seconds() / 60)
                users_info.append(f"üë§ {username} - {minutes_ago} –º–∏–Ω. –Ω–∞–∑–∞–¥")
            
            users_text = "\n".join(users_info)
            await update.message.reply_text(
                f"üïê –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å ({len(recent_members)}):\n\n{users_text}"
            )
        else:
            await update.message.reply_text(
                "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delh —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è."
            )
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}")

async def clean_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if update.effective_chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await update.effective_chat.get_member(update.effective_user.id)
    if user.status not in ["administrator", "creator"]:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return
    
    old_count = len(user_join_times)
    # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
    current_time = datetime.now(pytz.utc)
    for user_id in list(user_join_times.keys()):
        if user_join_times[user_id]['join_time'] < current_time - timedelta(hours=1):
            del user_join_times[user_id]
    
    await update.message.reply_text(
        f"‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!\n"
        f"–ë—ã–ª–æ –∑–∞–ø–∏—Å–µ–π: {old_count}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {len(user_join_times)}"
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("delh", delh_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("debug", debug_command))
    application.add_handler(CommandHandler("clean", clean_command))
    application.add_handler(CommandHandler("ss", ss_command))
    application.add_handler(CommandHandler("ship", ship_command))
    application.add_handler(CommandHandler("kirbizzlery", kirbizzlery_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    application.add_handler(CommandHandler("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", reminder_create_command))
    application.add_handler(CommandHandler("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reminders_list_command))
    application.add_handler(CommandHandler("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ_—Å–æ–∑–¥–∞—Ç—å", reminder_create_command))
    application.add_handler(CommandHandler("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ_—É–¥–∞–ª–∏—Ç—å", reminder_delete_command))
    application.add_handler(CommandHandler("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ_–ø–æ–º–æ—â—å", reminder_help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –¢–ï–ü–ï–†–¨ –ü–†–ê–í–ò–õ–¨–ù–û!
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, track_new_member))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("üìä –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!")
    print("üîî –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    print("‚è∞ –ö–æ–º–∞–Ω–¥–∞ /kirbizzlery –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    application.run_polling()

if __name__ == "__main__":
    main()
